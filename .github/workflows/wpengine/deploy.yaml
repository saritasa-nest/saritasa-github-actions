---
name: Deploy to WPEngine environment

on:
  workflow_call:
    inputs:
      backup_emails:
        description: Notification emails list to send confirmation about the backup, separated by commas
        required: true
        type: string
      backup_interval:
        description: Interval for backup status check (in seconds)
        default: 30
        required: false
        type: number
      backup_timeout:
        description: Wait time for backup to complete (in minutes)
        default: 15
        required: false
        type: number
      exclude_flags:
        description: Additional rsync exclude flags (can be multiple)
        default: --exclude=.*
        required: false
        type: string
      jira_key:
        description: JIRA key of the project
        required: true
        type: string
      wp_engine_env:
        description: Name of the WPEngine environment
        required: true
        type: string
    secrets:
      slack_webhook_url:
        required: true
        description: Slack webhook url to send notifications to channel
      wpengine_api_username:
        required: true
        description: Username for API access to WPEngine
      wpengine_api_password:
        required: true
        description: Password for API access to WPEngine
      wpengine_ssh_key:
        required: true
        description: Private SSH key needed to connect to server

jobs:
  backup:
    runs-on: saritasa-rocks-eks
    env:
      WPENGINE_API_URL: 'https://api.wpengineapi.com/v1/installs'
    steps:
      - name: Get ID of the environment
        id: get_env_id
        run: |
          # Get the ID of the environment, needed later to create and check a backup of this environment
          environment_id=$(
            curl -s -X GET \
            "$WPENGINE_API_URL" \
            -H 'accept: application/json' \
            -u ${{ secrets.wpengine_api_username }}:${{ secrets.wpengine_api_password }} \
            | jq -r ".results[] | select(.name == \"${{ inputs.wp_engine_env }}\") | .id"
          )
          echo "environment_id=$environment_id" >> "$GITHUB_OUTPUT"

      - name: Create a new backup and get its GUID
        id: create_backup
        run: |
          # Make a body for a POST request with description of the backup and an email list
          description="$(date -u +%Y-%m-%d-%H%M%SZ)-${{ inputs.wp_engine_env }}-backup"
          emails=$(echo "${{ inputs.backup_emails }}" | jq -R 'split(",")')
          body=$(jq -n \
            --arg desc "$description" \
            --argjson emails "$emails" \
            '{description: $desc, notification_emails: $emails}')

          # Request a backup and retrieve HTTP code of the response
          status_code=$(
            curl -s -X POST \
            -w "%{http_code}" \
            -o response.json \
            "$WPENGINE_API_URL/${{ steps.get_env_id.outputs.environment_id }}/backups" \
            -H 'accept: application/json' \
            -H 'Content-Type: application/json' \
            -u ${{ secrets.wpengine_api_username }}:${{ secrets.wpengine_api_password }} \
            -d "$body"
          )

          # If backup request failed - print an error and exit workflow
          if [[ "$status_code" != "202" ]]; then
            echo "Backup request failed (HTTP $status_code):"
            cat response.json
            exit 1
          fi

          # If backup request succeeded - save GUID of the backup to check its creation later
          backup_guid=$(jq -r .id response.json)
          echo "backup_guid=$backup_guid" >> "$GITHUB_OUTPUT"

      - name: Check backup status until completed
        run: |
          start_time=$(date +%s)
          end_time=$((start_time + ${{ inputs.backup_timeout }} * 60))

          while [ $(date +%s) -lt $end_time ]; do
            sleep ${{ inputs.backup_interval }}
            status=$(
              curl -X GET \
              "$WPENGINE_API_URL/${{ steps.get_env_id.outputs.environment_id }}/backups/${{ steps.create_backup.outputs.backup_guid }}" \
              -H 'accept: application/json' \
              -u ${{ secrets.wpengine_api_username }}:${{ secrets.wpengine_api_password }} | jq -r .status
            )

            echo "Current backup status: $status"
            if [[ "$status" == "completed" ]]; then
              echo "Backup completed"
              exit 0
            fi
          done

          echo "Backup did not complete in expected time."
          echo "Please check the backup page of the environment or contact WPEngine support for details."
          exit 1

  deploy:
    needs: backup
    runs-on: saritasa-rocks-eks
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: GitHub Action deploy to WPEngine
        uses: wpengine/github-action-wpe-site-deploy@v3
        with:
          WPE_ENV: ${{ inputs.wp_engine_env }}
          WPE_SSHG_KEY_PRIVATE: ${{ secrets.wpengine_ssh_key }}
          # FLAGS for `rsync`:
          # -a - enable recursion and preserves almost everything (file permissions, symbolic links, timestamps)
          # -z - compress file data
          # -v - verbose
          # -r - recursive
          # --inplace - update files "inplace" without creating temporary copies
          # --delete - delete files in the dst that no longer exist in the src
          # --exclude=.* - exclude dotfiles and dotfolders
          FLAGS: -azvr --inplace --delete ${{ inputs.exclude_flags }}

  send-notifications:
    needs: deploy
    if: always()
    runs-on: saritasa-rocks-eks
    steps:
      - name: Prepare notification
        id: prepare
        run: |
          ENVIRONMENT="*${{ inputs.wp_engine_env }}*"
          COMMIT="$(echo "${{ github.event.head_commit.message }}" | sed "s/[\`,\",']//g" | tr '\n' ' ')"
          REPO_NAME="${{ github.event.repository.name }}"
          AUTHOR_NAME="[$REPO_NAME] by ${{ github.event.head_commit.author.name }}"
          AUTHOR_LINK="https://github.com/${{ github.actor }}"
          BRANCH="${{ github.ref_name }}"
          SHA_SHORT=${GITHUB_SHA:0:7}
          REVISION="<${{ github.server_url }}/${{ github.repository }}/commit/$SHA_SHORT|$SHA_SHORT>"
          REPO_URL="${{ github.server_url }}/${{ github.repository }}"
          JIRA_URL="https://saritasa.atlassian.net/browse/${{ inputs.jira_key }}"
          MANAGE="<$REPO_URL|Github> | <$REPO_URL/issues|Issues> | <$JIRA_URL|Jira> | <$REPO_URL/actions/runs/${{ github.run_id }}|CI/CD>"

          echo "env=$ENVIRONMENT" >> $GITHUB_OUTPUT
          echo "commit=$COMMIT" >> $GITHUB_OUTPUT
          echo "author_name=$AUTHOR_NAME" >> $GITHUB_OUTPUT
          echo "author_link=$AUTHOR_LINK" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "revision=$REVISION" >> $GITHUB_OUTPUT
          echo "manage=$MANAGE" >> $GITHUB_OUTPUT
          
      - name: Notify about success
        id: send-success-message
        if: needs.deploy.result == 'success'
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "",
              "attachments": [
                {
                    "color": "2eb886",
                    "text": "The latest changes to ${{ steps.prepare.outputs.env }} have been deployed successfully",
                    "title": "${{ steps.prepare.outputs.commit }}",
                    "author_name": "${{ steps.prepare.outputs.author_name }}",
                    "author_link": "${{ steps.prepare.outputs.author_link }}",
                    "footer": "Github Actions",
                    "fields": [
                        {
                            "value": "${{ steps.prepare.outputs.application }}",
                            "title": "Open Application",
                            "short": false
                        },
                        {
                            "value": "${{ steps.prepare.outputs.branch }}",
                            "title": "Branch",
                            "short": true
                        },
                        {
                            "value": "${{ steps.prepare.outputs.revision }}",
                            "title": "Revision",
                            "short": true
                        },
                        {
                            "value": "${{ steps.prepare.outputs.manage }}",
                            "title": "Manage",
                            "short": false
                        }
                    ],
                    "mrkdwn_in": [
                        "pretext",
                        "text"
                    ]
                }
              ]
            }

      - name: Notify about failure
        id: send-failure-message
        if: needs.deploy.result != 'success'
        uses: slackapi/slack-github-action@v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            {
              "text": "",
              "attachments": [
                {
                    "color": "a30200",
                    "text": "The latest changes to ${{ steps.prepare.outputs.env }} failed to be deployed",
                    "title": "${{ steps.prepare.outputs.commit }}",
                    "author_name": "${{ steps.prepare.outputs.author_name }}",
                    "author_link": "${{ steps.prepare.outputs.author_link }}",
                    "footer": "Github Actions",
                    "fields": [
                        {
                            "value": "${{ steps.prepare.outputs.application }}",
                            "title": "Open Application",
                            "short": false
                        },
                        {
                            "value": "${{ steps.prepare.outputs.branch }}",
                            "title": "Branch",
                            "short": true
                        },
                        {
                            "value": "${{ steps.prepare.outputs.revision }}",
                            "title": "Revision",
                            "short": true
                        },
                        {
                            "value": "${{ steps.prepare.outputs.manage }}",
                            "title": "Manage",
                            "short": false
                        }
                    ],
                    "mrkdwn_in": [
                        "pretext",
                        "text"
                    ]
                }
              ]
            }
