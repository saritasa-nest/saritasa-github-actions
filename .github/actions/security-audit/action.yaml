name: security-audit
description: This check finds the unencrypted secrets and vulnerabilities in the code
inputs:
  enable-gitleaks-check:
    description: |
      Enable gitleaks check
      https://github.com/gitleaks/gitleaks-action
    required: true
    default: "false"
  enable-trivy-check:
    description: |
      Enable trivy check
      https://aquasecurity.github.io/trivy/
    required: true
    default: "false"
  enable-vulnerability-checks:
    description: |
      Enable vulnerabilities check
      https://aquasecurity.github.io/trivy/
    required: true
    default: "false"
  trivy-version:
    description: Trivy version to install
    required: false
    default: "v0.61.0"
  python-version:
    description: Python version to install
    required: false
    default: "3.13"
  cache-version:
    description: Bump this value to reset the apt package cache
    required: false
    default: "1.1"
  enable-pr-comment:
    description: Flag whether secrets leaks and vulnerabilities scan info should be added as PR comment
    required: false
    default: "true"
  github-token:
    description: Github token secret
    required: true
  gitleaks-license:
    description: Gitleaks license secret
    required: true
  gitleaks-slack-webhook:
    description: Slack webhook secret for team-devops-expose-secrets channel
    required: true

runs:
  using: composite
  steps:
    - name: Exit if checks are disabled
      if: inputs.enable-trivy-check == 'false' && inputs.enable-gitleaks-check == 'false' && inputs.enable-vulnerability-checks == 'false'
      shell: bash
      run: |
        exit 0

    - name: Cache apt packages
      uses: awalsh128/cache-apt-pkgs-action@v1.4.3
      with:
        packages: moreutils python3-pip jq
        version: ${{inputs.cache-version}}

    - name: Cache pip
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: pip-${{ runner.os }}-jinja2

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{inputs.python-version}}

    - name: Install dependencies
      shell: bash
      run: |
        sudo apt update
        sudo apt-get install -y moreutils python3-pip
        pip3 install jinja2

    - name: Install trivy
      uses: aquasecurity/setup-trivy@v0.2.3
      with:
        version: ${{inputs.trivy-version}}

    - name: Prepare data.json for PR and Slack comments
      shell: bash
      run: |
        jq -n \
          --arg repo "${{github.repository}}" \
          --arg pushBranch "${{ github.ref_name }}" \
          --arg pullRequestBranch "${{ github.head_ref }}" \
          --arg actor "${{github.actor}}" \
          --arg eventName "${{github.event_name}}" \
          --arg eventNumber "${{github.event.number}}" \
          --arg commitSha "${{github.sha}}" \
          '{github: {repo: $repo, pushBranch: $pushBranch, pullRequestBranch: $pullRequestBranch, actor: $actor, eventName: $eventName, eventNumber: $eventNumber, commitSha: $commitSha}}' \
        > data.json

    - name: Run trivy scanner in fs mode
      uses: aquasecurity/trivy-action@0.30.0
      if: inputs.enable-trivy-check == 'true' || inputs.enable-vulnerability-checks == 'true'
      id: trivy-check
      with:
        scan-type: fs
        scan-ref: .
        format: sarif
        exit-code: 1
        output: trivy-results.sarif
        skip-setup-trivy: true
      env:
        TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db:2"

    - name: Add trivy failure check results to data file
      shell: bash
      if: always() && steps.trivy-check.conclusion == 'failure'
      run: |
        python3 ${{ github.action_path }}/scripts/sarif-to-json.py trivy-results.sarif trivy-output.json trivy
        # Add the contents of the trivy-output.json file to data.json, from which 
        # notifications about the results of secret checks are generated
        jq -s '.[0] * .[1]' trivy-output.json data.json | sponge data.json
        echo reactions="confused" > $GITHUB_ENV

    - name: Run gitleaks check
      uses: gitleaks/gitleaks-action@v2
      if: always() && inputs.enable-gitleaks-check == 'true'
      id: gitleaks-check
      env:
        GITHUB_TOKEN: ${{inputs.github-token}}
        GITLEAKS_LICENSE: ${{inputs.gitleaks-license}}
        GITLEAKS_ENABLE_COMMENTS: false
        GITLEAKS_ENABLE_SUMMARY: false

    - name: Add gitleaks check results to data file
      shell: bash
      if: always() && inputs.enable-gitleaks-check == 'true'
      run: |
        python3 ${{ github.action_path }}/scripts/sarif-to-json.py results.sarif gitleaks-output.json gitleaks
        # Add the contents of the gitleaks-output.json file to data.json, from which 
        # notifications about the results of secret checks are generated
        if [[ -f gitleaks-output.json ]]; then
          jq -s '.[0] * .[1]' gitleaks-output.json data.json | sponge data.json
          echo reactions="confused" > $GITHUB_ENV
        fi

    - name: Create file with scan results
      shell: bash
      if: always()
      run: |
        if [[ "${{ inputs.enable-vulnerability-checks }}" == "true" ]]; then
          TEMPLATE="${{ github.action_path }}/templates/pr-comment-vulnerabilities-template.j2"
        else
          TEMPLATE="${{ github.action_path }}/templates/pr-comment-secrets-template.j2"
        fi
        python3 ${{ github.action_path }}/scripts/generate-message.py \
          "$TEMPLATE" \
          data.json \
          pr-comment.md
        cat pr-comment.md > $GITHUB_STEP_SUMMARY

    - name: Find PR comment with secret-check results
      uses: peter-evans/find-comment@v3
      if: always() && github.event_name == 'pull_request'
      id: find-secrets-comment
      with:
        issue-number: ${{ github.event.number }}
        comment-author: "github-actions[bot]"
        body-includes: Summary of the secrets check

    - name: Find PR comment with vulnerabilities-check results
      uses: peter-evans/find-comment@v3
      if: always() && github.event_name == 'pull_request'
      id: find-vulnerabilities-comment
      with:
        issue-number: ${{ github.event.number }}
        comment-author: "github-actions[bot]"
        body-includes: Summary of the vulnerabilities check

    - name: Upload secrets-checks results as a PR comment
      if: always() && github.event_name == 'pull_request' && inputs.enable-pr-comment == 'true' && steps.find-secrets-comment.outputs.comment-id != ''
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.number }}
        comment-id: ${{ steps.find-secrets-comment.outputs.comment-id }}
        body-path: pr-comment.md
        edit-mode: replace
        reactions: ${{ env.reactions || 'laugh' }}
        reactions-edit-mode: replace

    - name: Upload vulnerabilities-checks results as a PR comment
      if: always() && github.event_name == 'pull_request' && inputs.enable-pr-comment == 'true' && steps.find-vulnerabilities-comment.outputs.comment-id != ''
      uses: peter-evans/create-or-update-comment@v4
      with:
        issue-number: ${{ github.event.number }}
        comment-id: ${{ steps.find-vulnerabilities-comment.outputs.comment-id }}
        body-path: pr-comment.md
        edit-mode: replace
        reactions: ${{ env.reactions || 'laugh' }}
        reactions-edit-mode: replace

    - name: Prepare and send message to Slack
      shell: bash
      if: always() && (inputs.enable-gitleaks-check == 'true' || inputs.enable-trivy-check == 'true')
      run: |
        python3 ${{ github.action_path }}/scripts/generate-message.py \
          ${{ github.action_path }}/templates/slack-message-template.j2 \
          data.json \
          slack-message.json
        if [[ -s "slack-message.json" ]]; then
          curl -X POST -H 'Content-type: application/json' --data @slack-message.json ${{inputs.gitleaks-slack-webhook}}
        fi
