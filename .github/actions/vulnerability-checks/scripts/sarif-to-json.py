import argparse
import json
import os
import re
from collections import defaultdict
from typing import Dict, NamedTuple


class BaseInfo(NamedTuple):
    """
        A named tuple for base information

        Named tuples assign meaning to each position in a tuple and allow for more readable, self-documenting code
        They add the ability to access fields by name instead of position index
    """
    location: Dict
    file_name: str
    start_line: int
    end_line: int

def asc_sort_dict_by_keys(obj: Dict[str, any]) -> Dict[str, any]:
    """
    Sorts the map by keys

    Args:
        obj (dict): Input dictionary
    Returns:
        dict: Output dictionary where elements are sorted by keys
    """
    return dict(sorted(obj.items()))

def extract_base_info(item: Dict[str, any]) -> BaseInfo:
    """
    Extracts base information from a scan result item

    Args:
        item (dict): An item from sarif file containing base information
    Returns:
        tuple: Contains the location, file name, start line, and end line
    """
    location = item['locations'][0]['physicalLocation']
    file_name = location['artifactLocation']['uri']
    start_line = location['region']['startLine']
    end_line = location['region']['endLine']
    return BaseInfo(location, file_name, start_line, end_line)

def convert_vulnerabilities_results_to_json(run: Dict[str, any]) -> Dict[str, any]:
    """
    Converts trivy vulnerabilities analysis results into json format

    Args: run (dict): Data of the 'run' field from SARIF file
    {
        "version": "2.1.0",
        "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/main/sarif-2.1/schema/sarif-schema-2.1.0.json",
        "runs": [
            {
                "tool": {
                    "driver": {
                        "fullName": "Trivy Vulnerability Scanner",
                        "informationUri": "https://github.com/aquasecurity/trivy",
                        "name": "Trivy",
                        "rules": [
                            {
                                "id": "CVE-2",
                                "name": "LanguageSpecificPackageVulnerability",
                                "shortDescription": {
                                    "text": "micromatch: vulnerable to Regular Expression Denial of Service"
                                },
                                "fullDescription": {
                                    "text": "The NPM package `micromatch` prior to 4.0.8 is vulnerable to ReDoS."
                                },
                                "defaultConfiguration": {
                                    "level": "warning"
                                },
                                "helpUri": "https://avd.aquasec.com/nvd/cve-2",
                                "help": {
                                    "text": "Vulnerability CVE-2\nSeverity: MEDIUM\nPackage: micromatch\nFixed Version: 4.0.8\nLink: [CVE-2](https://avd.aquasec.com/nvd/cve-2)\nThe NPM package `micromatch` prior to 4.0.8 is vulnerable to ReDoS.",
                                    "markdown": "**Vulnerability CVE-2**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|micromatch|4.0.8|[CVE-2](https://avd.aquasec.com/nvd/cve-2)|\n\nThe NPM package `micromatch` prior to 4.0.8 is vulnerable to ReDoS."
                                },
                                "properties": {
                                    "precision": "very-high",
                                    "security-severity": "5.3",
                                    "tags": [
                                        "vulnerability",
                                        "security",
                                        "MEDIUM"
                                    ]
                                }
                            }
                        ],
                        "version": "0.56.2"
                    }
                },
                "results": [
                    {
                        "ruleId": "CVE-2",
                        "ruleIndex": 0,
                        "level": "warning",
                        "message": {
                            "text": "Package: micromatch\nInstalled Version: 3.1.10\nVulnerability CVE-2\nSeverity: MEDIUM\nFixed Version: 4.0.8\nLink: [CVE-2](https://avd.aquasec.com/nvd/cve-2)"
                        },
                        "locations": [
                            {
                                "physicalLocation": {
                                        "artifactLocation": {
                                        "uri": "package-lock.json",
                                        "uriBaseId": "ROOTPATH"
                                        },
                                        "region": {
                                            "startLine": 1301,
                                            "startColumn": 1,
                                            "endLine": 1324,
                                            "endColumn": 1
                                        }
                                },
                                "message": {
                                    "text": "package-lock.json: micromatch@3.1.10"
                                }
                            }
                        ]
                    }
                ],
                "columnKind": "utf16CodeUnits",
                "originalUriBaseIds": {
                    "ROOTPATH": {
                        "uri": "file:///github/workspace/"
                    }
                }
            }
        ]
    }

    Returns: dict: A JSON object containing the conversion results
    {
        "vulnerabilities": {
            "totalFiles": 1,
            "files": {
                "package-lock.json": [
                    {
                        "name": "package-lock.json",
                        "startLine": 1301,
                        "endLine": 1324,
                        "ruleId": "CVE-2",
                        "severity": "MEDIUM",
                        "package": "micromatch",
                        "description": "The NPM package `micromatch` prior to 4.0.8 is vulnerable to ReDoS",
                        "fixedVersion": "4.0.8"
                    }
                ]
            },
            "details": {
                "driver": {
                    "fullName": "Trivy Vulnerability Scanner",
                    "informationUri": "https://github.com/aquasecurity/trivy",
                    "name": "Trivy",
                    "rules": [
                        {
                            "id": "CVE-2",
                            "name": "LanguageSpecificPackageVulnerability",
                            "shortDescription": {
                                "text": "micromatch: vulnerable to Regular Expression Denial of Service"
                            },
                            "fullDescription": {
                                "text": "The NPM package `micromatch` prior to 4.0.8 is vulnerable to ReDoS."
                            },
                            "defaultConfiguration": {
                                "level": "warning"
                            },
                            "helpUri": "https://avd.aquasec.com/nvd/cve-2",
                            "help": {
                                "text": "Vulnerability CVE-2\nSeverity: MEDIUM\nPackage: micromatch\nFixed Version: 4.0.8\nLink: [CVE-2](https://avd.aquasec.com/nvd/cve-2)\nThe NPM package `micromatch` prior to 4.0.8 is vulnerable to  ReDoS.",
                                "markdown": "**Vulnerability CVE-2**\n| Severity | Package | Fixed Version | Link |\n| --- | --- | --- | --- |\n|MEDIUM|micromatch|4.0.8|[CVE-2](https://avd.aquasec.com/nvd/cve-2)|\n\nThe NPM package `micromatch` prior to 4.0.8 is vulnerable to ReDoS."
                            },
                            "properties": {
                                "precision": "very-high",
                                "security-severity": "5.3",
                                "tags": [
                                    "vulnerability",
                                    "security",
                                    "MEDIUM"
                                ]
                            }
                        }
                    ],
                    "version": "0.56.2"
                }
            }
        },
        "github": {
            "repo": "saritasa-nest/probot-tests",
            "pushBranch": "refs/heads/main",
            "pullRequestBranch": "",
            "actor": "darliiin",
            "eventName": "push",
            "eventNumber": "",
            "commitSha": "d2f04a9e43a0760605d0bee4fb310c48667ca3a4"
        }
    }
    """
    files = defaultdict(list)
    
    vulnerabilities_info = {}
    for rule in run['tool']['driver']['rules']:
        rule_id = rule['id']
        description = rule['fullDescription']['text'].rstrip()

        vulnerabilities_info[rule_id] = {
            'description': description,
        }

    for item in run['results']:
        location, file_name, start_line, end_line = extract_base_info(item)

        text = item['message']['text']
        # To specify the error type, need to convert the `severity` variable.
        # From: 
        #   Artifact: app/config.yaml
        #   Type: Secret GitHub Fine-grained personal access tokens
        #   Severity: CRITICAL
        #   Match:  name
        #   title: title
        #   token: ********************************************sdf
        #   token-2: *****
        # To: 
        #   CRITICAL
        severity = text.split('Severity: ')[1].split('\n')[0].strip() if 'Severity: ' in text else 'UNKNOWN'
        package = text.split('Package: ')[1].split('\n')[0].strip() if 'Package: ' in text else 'N/A'
        installed_version = text.split('Installed Version: ')[1].split('\n')[0].strip() if 'Installed Version: ' in text else 'N/A'
        fixed_version = text.split('Fixed Version: ')[1].split('\n')[0].strip() if 'Fixed Version: ' in text else 'N/A'

        rule_info = vulnerabilities_info.get(item['ruleId'], {})
        description = rule_info.get('description')

        files[file_name].append({
            'name': file_name,
            'startLine': start_line,
            'endLine': end_line,
            'ruleId': item['ruleId'],
            'severity': severity,
            'package': package,
            'installedVersion': installed_version,
            'fixedVersion': fixed_version,
            'description': description,
        })

    result = {
        'vulnerabilities': {
            'totalFiles': len(files.keys()),
            'files': asc_sort_dict_by_keys(files),
            'details': run['tool'],
        },
    }
    return result

def main():
    """
    Convert sarif file with check results to json file

    Takes arguments, reads the contents of the specified sarif file,
    extracts the necessary information and converts it into the output json file
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('input_file', type=str, help='Path to the SARIF file to be converted')
    parser.add_argument('output_file', type=str, help='Path to the JSON file where the conversion result will be saved')
    parser.add_argument('check_type', type=str, choices=['vulnerabilities'], help='Check type (vulnerabilities)')

    args = parser.parse_args()

    with open(args.input_file, 'r', encoding='utf-8') as file:
        sarif_data = json.load(file)

    run = sarif_data['runs'][0]

    if not run['results']:
        return

    if args.check_type == 'vulnerabilities':
        result = convert_vulnerabilities_results_to_json(run) 

    with open(args.output_file, 'w', encoding='utf-8') as file:
        json.dump(result, file, indent=2)

if __name__ == '__main__':
    main()
